<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--  
 This is the Solr schema file. This file should be named "schema.xml" and
 should be in the conf directory under the solr home
 (i.e. ./solr/conf/schema.xml by default) 
 or located where the classloader for the Solr webapp can find it.

 This example schema is the recommended starting point for users.
 It should be kept correct and concise, usable out-of-the-box.

 For more information, on how to customize this file, please see
 http://wiki.apache.org/solr/SchemaXml

 PERFORMANCE NOTE: this schema includes many optional features and should not
 be used for benchmarking.  To improve performance one could
  - set stored="false" for all fields possible (esp large fields) when you
    only need to search on the field but don't need to return the original
    value.
  - set indexed="false" if you don't need to search on the field, but only
    return the field as a result of searching on other indexed fields.
  - remove all unneeded copyField statements
  - for best index size and searching performance, set "index" to false
    for all general text fields, use copyField to copy them to the
    catchall "text" field, and use that for searching.
  - For maximum indexing performance, use the StreamingUpdateSolrServer
    java client.
  - Remember to run the JVM in server mode, and use a higher logging level
    that avoids logging every request
-->

<schema name="esco_data_en" version="1.5">
  <!-- attribute "name" is the name of this schema and is only used for display purposes.
       version="x.y" is Solr's version number for the schema syntax and 
       semantics.  It should not normally be changed by applications.

       1.0: multiValued attribute did not exist, all fields are multiValued 
            by nature
       1.1: multiValued attribute introduced, false by default 
       1.2: omitTermFreqAndPositions attribute introduced, true by default 
            except for text fields.
       1.3: removed optional field compress feature
       1.4: autoGeneratePhraseQueries attribute introduced to drive QueryParser
            behavior when a single string produces multiple tokens.  Defaults 
            to off for version >= 1.4
       1.5: omitNorms defaults to true for primitive field types 
            (int, float, boolean, string...)
     -->

  <fields>
    <!-- Valid attributes for fields:
      name: mandatory - the name for the field
      type: mandatory - the name of a field type from the
        <types> fieldType section
      indexed: true if this field should be indexed (searchable or sortable)
      stored: true if this field should be retrievable
      docValues: true if this field should have doc values. Doc values are
        useful for faceting, grouping, sorting and function queries. Although not
        required, doc values will make the index faster to load, more
        NRT-friendly and more memory-efficient. They however come with some
        limitations: they are currently only supported by StrField, UUIDField
        and all Trie*Fields, and depending on the field type, they might
        require the field to be single-valued, be required or have a default
        value (check the documentation of the field type you're interested in
        for more information)
      multiValued: true if this field may contain multiple values per document
      omitNorms: (expert) set to true to omit the norms associated with
        this field (this disables length normalization and index-time
        boosting for the field, and saves some memory).  Only full-text
        fields or fields that need an index-time boost need norms.
        Norms are omitted for primitive (non-analyzed) types by default.
      termVectors: [false] set to true to store the term vector for a
        given field.
        When using MoreLikeThis, fields used for similarity should be
        stored for best performance.
      termPositions: Store position information with the term vector.
        This will increase storage costs.
      termOffsets: Store offset information with the term vector. This
        will increase storage costs.
      required: The field is required.  It will throw an error if the
        value does not exist
      default: a value that should be used if no value is specified
        when adding a document.
    -->

    <!-- field names should consist of alphanumeric or underscore characters only and
       not start with a digit.  This is not currently strictly enforced,
       but other field names will not have first class support from all components
       and back compatibility is not guaranteed.  Names with both leading and
       trailing underscores (e.g. _version_) are reserved.
    -->

    <field name="language" type="string" indexed="true" stored="true" required="true" multiValued="false"/>
    <field name="status" type="string" indexed="true" stored="true" required="false" multiValued="false"/>

    <!-- resource identification metadata -->

    <!-- unique esco resource uri (exact match) -->
    <field name="URI" type="string" indexed="true" stored="true" required="true" multiValued="false"/>

    <!-- ctc id -->
    <field name="ctc_id" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
    <!-- dcterms identifier to store all identifiers -->
    <field name="dcterms_id" type="string" indexed="true" stored="true" required="false" multiValued="true"/>

    <field name="notation" type="string" indexed="true" stored="true" required="false" multiValued="true"/>

    <!-- sorting fields? -->

    <!-- resource type (not analysed, exact match) -->
    <field name="type" type="string" indexed="true" stored="true" required="true" multiValued="true"/>
    <!-- inScheme (not analysed, exact match) -->
    <field name="inScheme" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- topConceptOf (not analysed, exact match) -->
    <field name="topConceptOf" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- dcterms_subject (not analysed, exact match) -->
    <field name="subject" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- broader (not analysed, exact match) -->
    <field name="broader" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- broader (not analysed, exact match) -->
    <field name="broaderTransitive" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- broader (not analysed, exact match) -->
    <field name="subject_broaderTransitives" type="string" indexed="true" stored="true" required="false"
           multiValued="true"/>
    <!-- topConceptOf (not analysed, exact match) -->
    <field name="narrower" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- broader (not analysed, exact match) -->
    <field name="narrowerTransitive" type="string" indexed="true" stored="true" required="false" multiValued="true"/>
    <!-- topConceptOf (not analysed, exact match) -->
    <field name="related" type="string" indexed="true" stored="true" required="false" multiValued="true"/>

    <field name="fallbackLabel" type="string" indexed="false" stored="true" required="false" multiValued="false"/>
    <field name="referenceLanguage" type="string" indexed="true" stored="true" required="false" multiValued="false"/>

    <!-- version metadata -->
    <!-- releasedWithVersion, approvedForRelease, status -->
    <!-- dates  (for faster range queries use trie-coded fields (type="tdate"))  -->
    <field name="dcterms_modified" type="date" indexed="true" stored="true" required="false"/>

    <!-- full text search fields - language dependant -->
    <field name="prefLabel" type="text_en" indexed="true" stored="true" required="false" multiValued="false"/>
    <field name="altLabel" type="text_en" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="hiddenLabel" type="text_en" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="altLabelPlus" type="text_en" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="facetLabel" type="text_en" indexed="true" stored="true" required="false" multiValued="true"/>

    <field name="description" type="text_html_en" indexed="true" stored="true" required="false" multiValued="true"/>

    <field name="definition" type="text_html_en" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="scopeNote" type="text_html_en" indexed="true" stored="true" required="false" multiValued="true"/>
    <field name="historyNote" type="text_html_en" indexed="true" stored="true" required="false" multiValued="true"/>

    <!-- api suggester fields: -->
    <field name="occupation_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="skill_suggest" type="full_suggest" indexed="true" stored="false" required="false" multiValued="true"/>
    <field name="qualification_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="occupation_skill_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="awardingbody_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="location_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>

    <field name="occupation_male_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="skill_male_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="occupation_skill_male_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>

    <field name="occupation_female_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="skill_female_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="occupation_skill_female_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>

    <field name="occupation_neutral_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="skill_neutral_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>
    <field name="occupation_skill_neutral_suggest" type="full_suggest" indexed="true" stored="false" required="false"
           multiValued="true"/>

    <dynamicField name="relation_from_*" type="string" indexed="true" stored="true" required="false"
                  multiValued="true"/>
    <dynamicField name="relation_to_*" type="string" indexed="true" stored="true" required="false" multiValued="true"/>

    <!-- containing subset of searchable text fields (implemented via copyField further on in this schema  -->
    <field name="shortText" type="text_en" indexed="true" stored="true" multiValued="true"/>
    <field name="text" type="text_en" indexed="true" stored="true" multiValued="true"/>
    <field name="longText" type="text_html_en" indexed="true" stored="true" multiValued="true"/>

    <field name="prefLabelSort" type="collationSortedString" indexed="true" stored="true" multiValued="false"/>
    <field name="prefLabelString" type="string" indexed="true" stored="true" multiValued="false"/>
    <field name="normalizedPrefLabelString" type="string" indexed="true" stored="true" multiValued="false"/>
    <field name="prefLabelUpperString" type="string" indexed="true" stored="true" multiValued="false"/>
    <field name="prefLabelStrings" type="string" indexed="true" stored="true" multiValued="true"/>

    <field name="broaderTransitives_all" type="string" indexed="true" stored="true" required="false"
           multiValued="true"/>

    <field name="textString" type="string" indexed="true" stored="true" multiValued="true"/>
    <field name="shortTextString" type="string" indexed="true" stored="true" multiValued="true"/>

    <!-- dynamic field to store identifiers with a particular prefix in a dedicated field -->
    <dynamicField name="id_*" type="string" indexed="true" stored="true" required="false" multiValued="false"/>
    <!-- dynamic field to store notations of a particular datatype in a dedicated field -->
    <dynamicField name="notation_*" type="string" indexed="true" stored="true" required="false" multiValued="false"/>

    <dynamicField name="view_*" type="string" indexed="false" stored="true" required="false" multiValued="true"/>

    <copyField source="prefLabel" dest="shortTextString"/>
    <copyField source="altLabel" dest="shortTextString"/>
    <copyField source="altLabelPlus" dest="shortTextString"/>
    <copyField source="hiddenLabel" dest="shortTextString"/>

    <copyField source="prefLabel" dest="textString"/>
    <copyField source="altLabel" dest="textString"/>
    <copyField source="altLabelPlus" dest="textString"/>
    <copyField source="hiddenLabel" dest="textString"/>
    <copyField source="notation" dest="textString"/>
    <copyField source="identifier" dest="textString"/>

    <copyField source="prefLabel" dest="prefLabelSort"/>
    <copyField source="prefLabel" dest="prefLabelString"/>
    <copyField source="prefLabel" dest="prefLabelStrings"/>
    <copyField source="prefLabelUpperString" dest="prefLabelStrings"/>
    <copyField source="normalizedPrefLabelString" dest="prefLabelStrings"/>

    <copyField source="prefLabel" dest="shortText"/>
    <copyField source="altLabel" dest="shortText"/>
    <copyField source="altLabelPlus" dest="shortText"/>
    <copyField source="hiddenLabel" dest="shortText"/>

    <copyField source="prefLabel" dest="text"/>
    <copyField source="altLabel" dest="text"/>
    <copyField source="altLabelPlus" dest="text"/>
    <copyField source="hiddenLabel" dest="text"/>
    <copyField source="notation" dest="text"/>
    <copyField source="identifier" dest="text"/>

    <copyField source="prefLabel" dest="longText"/>
    <copyField source="altLabel" dest="longText"/>
    <copyField source="altLabelPlus" dest="longText"/>
    <copyField source="hiddenLabel" dest="longText"/>
    <copyField source="definition" dest="longText"/>
    <copyField source="scopeNote" dest="longText"/>
    <copyField source="description" dest="longText"/>

    <copyField source="broaderTransitive" dest="broaderTransitives_all"/>
    <copyField source="subject_broaderTransitives" dest="broaderTransitives_all"/>


    <!--field name="payloads" type="payloads" indexed="true" stored="true"/-->


    <!--
      Some fields such as popularity and manu_exact could be modified to
      leverage doc values:
      <field name="popularity" type="int" indexed="true" stored="true" docValues="true" />
      <field name="manu_exact" type="string" indexed="false" stored="false" docValues="true" />
      <field name="cat" type="string" indexed="true" stored="true" docValues="true" multiValued="true"/>


      Although it would make indexing slightly slower and the index bigger, it
      would also make the index faster to load, more memory-efficient and more
      NRT-friendly.
      -->

    <!-- Dynamic field definitions allow using convention over configuration
        for fields via the specification of patterns to match field names.
        EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
        RESTRICTION: the glob-like pattern in the name attribute must have
        a "*" only at the start or the end.  -->


    <!-- uncomment the following to ignore any fields that don't already match an existing
         field name or dynamic field, rather than reporting them as an error.
         alternately, change the type="ignored" to some other type e.g. "text" if you want
         unknown fields indexed and/or stored by default -->
    <dynamicField name="*" type="ignored" multiValued="true"/>

    <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
       or Solr won't start. _version_ and update log are required for SolrCloud
    -->
    <field name="_version_" type="long" indexed="true" stored="true"/>

  </fields>


  <!-- Field to use to determine and enforce document uniqueness.
       Unless this field is marked with required="false", it will be a required field
    -->
  <uniqueKey>URI</uniqueKey>

  <!-- DEPRECATED: The defaultSearchField is consulted by various query parsers when
   parsing a query string that isn't explicit about the field.  Machine (non-user)
   generated queries are best made explicit, or they can use the "df" request parameter
   which takes precedence over this.
   Note: Un-commenting defaultSearchField will be insufficient if your request handler
   in solrconfig.xml defines "df", which takes precedence. That would need to be removed.
  <defaultSearchField>text</defaultSearchField> -->

  <!-- DEPRECATED: The defaultOperator (AND|OR) is consulted by various query parsers
   when parsing a query string to determine if a clause of the query should be marked as
   required or optional, assuming the clause isn't already marked by some operator.
   The default is OR, which is generally assumed so it is not a good idea to change it
   globally here.  The "q.op" request parameter takes precedence over this.
  <solrQueryParser defaultOperator="OR"/> -->

  <!-- copyField commands copy one field to another at the time a document
        is added to the index.  It's used either to index the same field differently,
        or to add multiple fields to the same field for easier/faster searching.  -->


  <!-- Above, multiple source fields are copied to the [text] field.
   Another way to map multiple source fields to the same
   destination field is to use the dynamic field syntax.
   copyField also supports a maxChars to copy setting.  -->

  <!-- <copyField source="*_t" dest="text" maxChars="3000"/> -->

  <!-- copy name to alphaNameSort, a field designed for sorting by name -->
  <!-- <copyField source="name" dest="alphaNameSort"/> -->

  <types>
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
    <fieldType name="string" class="solr.StrField" sortMissingLast="true"/>

    <!-- boolean type: "true" or "false" -->
    <!--<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true"/>-->

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	     This includes "string","boolean", and, as of 3.5 (and 4.x),
	     int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
    <!--<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0"/>-->
    <!--<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0"/>-->
    <fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0"/>
    <!--<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0"/>-->

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
    <!--<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0"/>-->
    <!--<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0"/>-->
    <!--<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0"/>-->
    <!--<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0"/>-->

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the DateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
    <fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0"/>

    <!-- A Trie based date field for faster date range queries and date faceting. -->
    <!--<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0"/>-->


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
    <!--<fieldtype name="binary" class="solr.BinaryField"/>-->

    <!--
      Note:
      These should only be used for compatibility with existing indexes (created with lucene or older Solr versions).
      Use Trie based fields instead. As of Solr 3.5 and 4.x, Trie based fields support sortMissingFirst/Last
      
      Plain numeric field types that store and index the text
      value verbatim (and hence don't correctly support range queries, since the
      lexicographic ordering isn't equal to the numeric ordering)
    -->
    <!--<fieldType name="pint" class="solr.IntField"/>-->
    <!--<fieldType name="plong" class="solr.LongField"/>-->
    <!--<fieldType name="pfloat" class="solr.FloatField"/>-->
    <!--<fieldType name="pdouble" class="solr.DoubleField"/>-->
    <!--<fieldType name="pdate" class="solr.DateField" sortMissingLast="true"/>-->

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
    <!--<fieldType name="random" class="solr.RandomSortField" indexed="true"/>-->

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
    <fieldtype name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField"/>

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
    <!--<fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d"/>-->

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
    <!--<fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate"/>-->

    <!-- An alternative geospatial field type new to Solr 4.  It supports multiValued and polygon shapes.
      For more information about this and other Spatial fields new to Solr 4, see:
      http://wiki.apache.org/solr/SolrAdaptersForLuceneSpatial4
    -->
    <!--<fieldType name="location_rpt" class="solr.SpatialRecursivePrefixTreeFieldType"-->
    <!--geo="true" distErrPct="0.025" maxDistErr="0.000009" units="degrees"/>-->

    <!-- Money/currency field type. See http://wiki.apache.org/solr/MoneyFieldType
         Parameters:
           defaultCurrency: Specifies the default currency if none specified. Defaults to "USD"
           precisionStep:   Specifies the precisionStep for the TrieLong field used for the amount
           providerClass:   Lets you plug in other exchange provider backend:
                            solr.FileExchangeRateProvider is the default and takes one parameter:
                              currencyConfig: name of an xml file holding exchange rates
                            solr.OpenExchangeRatesOrgProvider uses rates from openexchangerates.org:
                              ratesFileLocation: URL or path to rates JSON file (default latest.json on the web)
                              refreshInterval: Number of minutes between each rates fetch (default: 1440, min: 60)
    -->
    <!--<fieldType name="currency" class="solr.CurrencyField" precisionStep="8" defaultCurrency="USD"-->
    <!--currencyConfig="currency.xml"/>-->


    <!-- esco defined types -->
    <fieldType name="full_suggest" class="solr.TextField" positionIncrementGap="100" stored="true" multiValued="true">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <!--<filter class="eu.esco.solr.patch.LowerCaseSuggesterFieldFilterFactory"/>-->
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <!-- esco defined types -->
    <fieldType name="alt_suggest_type" class="solr.TextField" positionIncrementGap="100" stored="true"
               multiValued="true">
      <analyzer>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.StandardFilterFactory"/>
        <filter class="solr.LowerCaseFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="collationSortedString" class="solr.TextField">
      <analyzer>
        <tokenizer class="solr.KeywordTokenizerFactory"/>
        <filter class="solr.CollationKeyFilterFactory" language="en" strength="primary"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
        -->
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
              <filter class="solr.EnglishMinimalStemFilterFactory"/>
        -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>
        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
              <filter class="solr.EnglishMinimalStemFilterFactory"/>
        -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

    <fieldType name="text_html_en" class="solr.TextField" positionIncrementGap="100">
      <analyzer type="index">
        <charFilter class="solr.HTMLStripCharFilterFactory"/>
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
        -->
        <!--<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>-->

        <!--manageable list of stopwords, see readme.md-->
        <filter class="solr.ManagedStopFilterFactory" managed="english" />


        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
              <filter class="solr.EnglishMinimalStemFilterFactory"/>
        -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
      <analyzer type="query">
        <tokenizer class="solr.StandardTokenizerFactory"/>
        <!--<tokenizer class="solr.PatternTokenizerFactory" pattern="-\s*" />-->

        <!--<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true"/>-->
        <!--manageable list of synonims, see readme.md-->
        <filter class="solr.ManagedSynonymFilterFactory" managed="english" />


        <filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt"/>
        <filter class="solr.LowerCaseFilterFactory"/>
        <filter class="solr.EnglishPossessiveFilterFactory"/>
        <filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt"/>
        <!-- Optionally you may want to use this less aggressive stemmer instead of PorterStemFilterFactory:
              <filter class="solr.EnglishMinimalStemFilterFactory"/>
        -->
        <filter class="solr.PorterStemFilterFactory"/>
      </analyzer>
    </fieldType>

  </types>

  <!-- Similarity is the scoring routine for each document vs. a query.
       A custom Similarity or SimilarityFactory may be specified here, but 
       the default is fine for most applications.  
       For more info: http://wiki.apache.org/solr/SchemaXml#Similarity
    -->
  <!--
     <similarity class="com.example.solr.CustomSimilarityFactory">
       <str name="paramkey">param value</str>
     </similarity>
    -->

</schema>

